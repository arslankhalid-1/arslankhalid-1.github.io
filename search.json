[
  {
    "objectID": "Assignment4.html",
    "href": "Assignment4.html",
    "title": "Assignment 4",
    "section": "",
    "text": "Created by Arslan Khalid, Cristina Rivera, Megan Pruitt, and Xinyuan Lai.\n\nChart 1\n\n# Load ggplot2\nlibrary(ggplot2)\n\n# Load the data\ndata <- data.frame(\n  Groups=c(\"Female 1970\", \"Male 1970\", \"Female 2020\", \"Male 2020\") , \n  Enrollment=c(8.2, 14.1, 38.3, 36.7), \n  Bachelors=c(31, 42, 92, 67)\n)\n\n# Calculate the future positions on the x axis of each bar (left border, central position, right border)\n\ndata$right <- cumsum(data$Bachelors) + 30*c(0:(nrow(data)-1))\ndata$left <- data$right - data$Bachelors\n\n# Plot\nggplot(data, aes(ymin = 0)) + \n  geom_rect(aes(xmin = left, xmax = right, ymax = Enrollment, colour = Groups, fill = Groups)) +\n  ggtitle(\"College Enrollment and Percentage with \\nat Least a Bachelor's by Year and Gender\") +\n  xlab(\"Enrollment by Year and Gender\") + \n  ylab(\"Percentage with at Least a Bachelor's\") +\n  theme(plot.title = element_text(size = 12, hjust = 0.5),\n        axis.title.y = element_text(size = 12),\n        axis.title.x = element_text(size = 12))\n\n\n\n\n\n\nChart 2\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n✔ purrr   0.3.4      \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(hrbrthemes)\n\nNOTE: Either Arial Narrow or Roboto Condensed fonts are required to use these themes.\n      Please use hrbrthemes::import_roboto_condensed() to install Roboto Condensed and\n      if Arial Narrow is not on your system, please see https://bit.ly/arialnarrow\n\nlibrary(babynames)\nlibrary(viridis)\n\nLoading required package: viridisLite\n\n# Load dataset from github\ndata <- read.table(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv\", header=T)\n\ndata$date <- as.Date(data$date)\n\ndon <- babynames %>% \n  filter(name %in% c(\"Ashley\", \"Amanda\", \"Mary\", \"Deborah\",   \"Dorothy\", \"Betty\", \"Helen\", \"Jennifer\", \"Shirley\")) %>%\n  filter(sex==\"F\")\n\n# Plot\ndon %>%\n  ggplot( aes(x=year, y=n, xgroup=name, fill=name)) +\n  labs(y= \"Frequency\", x = \"Years\") +\n  geom_area() +\n  scale_fill_viridis(discrete = TRUE) +\n  theme(legend.position= \"\") +\n  ggtitle(\"Popularity of American names in the previous 30 years\") +\n  theme_ipsum() +\n  theme(\n    legend.position=\"none\",\n    panel.spacing = unit(0, \"lines\"),\n    strip.text.x = element_text(size = 8),\n    plot.title = element_text(size=13)\n  ) +\n  facet_wrap(~name, scale=\"free_y\")\n\n\n\n\n\n\nSources:\nhttps://r-graph-gallery.com/81-barplot-with-variable-width.html\nhttps://www.statista.com/statistics/184272/educational-attainment-of-college-diploma-or-higher-by-gender/\nhttps://www.statista.com/statistics/236360/undergraduate-enrollment-in-us-by-gender/\nhttps://r-graph-gallery.com/223-faceting-with-ggplot2.html"
  },
  {
    "objectID": "assign05.html",
    "href": "assign05.html",
    "title": "Assignment 5",
    "section": "",
    "text": "Chart 3 - Bar Chart\n\nlibrary(grid)\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nnames <- c(\n    \"Hantavirus\", \"Tularemia\", \"Dengue\", \"Ebola\", \"E. coli\", \n    \"Tuberculosis\", \"Salmonella\", \"Vaccinia\", \"Brucella\"\n  )\n  \n# Name is an ordered factor. We do this to ensure the bars are sorted.\ndata <- data.frame(\n  count = c(6, 7, 7, 9, 11, 15, 17, 18, 54), \n  name = factor(names, levels = names),\n  y = seq(length(names)) * 0.9\n)\n\n# The colors\nBLUE <- \"#076fa2\"\nRED <- \"#E3120B\"\nBLACK <- \"#202020\"\nGREY <- \"grey50\"\n\nplt <- ggplot(data) +\n  geom_col(aes(count, name), fill = BLUE, width = 0.6) \n\nplt\n\n\n\n\nChart 4 - Column Charts\n\n# Load ggplot2\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Data\ndata <- iris %>% select(Species, Sepal.Length) \n \n# Calculates mean, sd, se and IC\nmy_sum <- data %>%\n  group_by(Species) %>%\n  summarise( \n    n=n(),\n    mean=mean(Sepal.Length),\n    sd=sd(Sepal.Length)\n  ) %>%\n  mutate( se=sd/sqrt(n))  %>%\n  mutate( ic=se * qt((1-0.05)/2 + .5, n-1))\n \n# Standard deviation\nggplot(my_sum) +\n  geom_bar( aes(x=Species, y=mean), stat=\"identity\", fill=\"forestgreen\", alpha=0.5) +\n  geom_errorbar( aes(x=Species, ymin=mean-sd, ymax=mean+sd), width=0.4, colour=\"orange\", alpha=0.9, size=1.5) +\n  ggtitle(\"using standard deviation\")\n\n\n\n# Standard Error\nggplot(my_sum) +\n  geom_bar( aes(x=Species, y=mean), stat=\"identity\", fill=\"forestgreen\", alpha=0.5) +\n  geom_errorbar( aes(x=Species, ymin=mean-se, ymax=mean+se), width=0.4, colour=\"orange\", alpha=0.9, size=1.5) +\n  ggtitle(\"using standard error\")\n\n\n\n# Confidence Interval\nggplot(my_sum) +\n  geom_bar( aes(x=Species, y=mean), stat=\"identity\", fill=\"forestgreen\", alpha=0.5) +\n  geom_errorbar( aes(x=Species, ymin=mean-ic, ymax=mean+ic), width=0.4, colour=\"orange\", alpha=0.9, size=1.5) +\n  ggtitle(\"using confidence interval\")\n\n\n\n\nComparing variables\n\n#Let's build a dataset : height of 10 sorgho and poacee sample in 3 environmental conditions (A, B, C)\ndata <- data.frame(\n  specie=c(rep(\"sorgho\" , 10) , rep(\"poacee\" , 10) ),\n  cond_A=rnorm(20,10,4),\n  cond_B=rnorm(20,8,3),\n  cond_C=rnorm(20,5,4)\n)\n\n#Let's calculate the average value for each condition and each specie with the *aggregate* function\nbilan <- aggregate(cbind(cond_A,cond_B,cond_C)~specie , data=data , mean)\nrownames(bilan) <- bilan[,1]\nbilan <- as.matrix(bilan[,-1])\n \n#Plot boundaries\nlim <- 1.2*max(bilan)\n\n#A function to add arrows on the chart\nerror.bar <- function(x, y, upper, lower=upper, length=0.1,...){\n  arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...)\n}\n \n#Then I calculate the standard deviation for each specie and condition :\nstdev <- aggregate(cbind(cond_A,cond_B,cond_C)~specie , data=data , sd)\nrownames(stdev) <- stdev[,1]\nstdev <- as.matrix(stdev[,-1]) * 1.96 / 10\n \n#I am ready to add the error bar on the plot using my \"error bar\" function !\nze_barplot <- barplot(bilan , beside=T , legend.text=T,col=c(\"blue\" , \"skyblue\") , ylim=c(0,lim) , ylab=\"height\")\nerror.bar(ze_barplot,bilan, stdev)\n\n\n\n\nChart 5 - Circular Area Charts\n\n# Library\nlibrary(fmsb)\n \n# Create data: note in High school for Jonathan:\ndata <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))\ncolnames(data) <- c(\"math\" , \"english\" , \"biology\" , \"music\" , \"R-coding\", \"data-viz\" , \"french\" , \"physic\", \"statistic\", \"sport\" )\n \n# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!\ndata <- rbind(rep(20,10) , rep(0,10) , data)\n \n# Check your data, it has to look like this!\n# head(data)\n\n# Custom the radarChart !\nradarchart( data  , axistype=1 , \n \n    #custom polygon\n    pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 , \n \n    #custom the grid\n    cglcol=\"grey\", cglty=1, axislabcol=\"grey\", caxislabels=seq(0,20,5), cglwd=0.8,\n \n    #custom labels\n    vlcex=0.8 \n    )"
  },
  {
    "objectID": "assign04.html",
    "href": "assign04.html",
    "title": "Assignment 4",
    "section": "",
    "text": "Chart 1\n\n# Load ggplot2\nlibrary(ggplot2)\n\n# Load the data\ndata <- data.frame(\n  Groups=c(\"Female 1970\", \"Male 1970\", \"Female 2020\", \"Male 2020\") , \n  Enrollment=c(8.2, 14.1, 38.3, 36.7), \n  Bachelors=c(31, 42, 92, 67)\n)\n\n# Calculate the future positions on the x axis of each bar (left border, central position, right border)\n\ndata$right <- cumsum(data$Bachelors) + 30*c(0:(nrow(data)-1))\ndata$left <- data$right - data$Bachelors\n\n# Plot\nggplot(data, aes(ymin = 0)) + \n  geom_rect(aes(xmin = left, xmax = right, ymax = Enrollment, colour = Groups, fill = Groups)) +\n  ggtitle(\"College Enrollment and Percentage with \\nat Least a Bachelor's by Year and Gender\") +\n  xlab(\"Enrollment by Year and Gender\") + \n  ylab(\"Percentage with at Least a Bachelor's\") +\n  theme(plot.title = element_text(size = 12, hjust = 0.5),\n        axis.title.y = element_text(size = 12),\n        axis.title.x = element_text(size = 12))\n\n\n\n\n\n\nChart 2\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n✔ purrr   0.3.4      \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(hrbrthemes)\n\nNOTE: Either Arial Narrow or Roboto Condensed fonts are required to use these themes.\n      Please use hrbrthemes::import_roboto_condensed() to install Roboto Condensed and\n      if Arial Narrow is not on your system, please see https://bit.ly/arialnarrow\n\nlibrary(babynames)\nlibrary(viridis)\n\nLoading required package: viridisLite\n\n# Load dataset from github\ndata <- read.table(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv\", header=T)\n\ndata$date <- as.Date(data$date)\n\ndon <- babynames %>% \n  filter(name %in% c(\"Ashley\", \"Amanda\", \"Mary\", \"Deborah\",   \"Dorothy\", \"Betty\", \"Helen\", \"Jennifer\", \"Shirley\")) %>%\n  filter(sex==\"F\")\n\n# Plot\ndon %>%\n  ggplot( aes(x=year, y=n, xgroup=name, fill=name)) +\n  labs(y= \"Frequency\", x = \"Years\") +\n  geom_area() +\n  scale_fill_viridis(discrete = TRUE) +\n  theme(legend.position= \"\") +\n  ggtitle(\"Popularity of American names in the previous 30 years\") +\n  theme_ipsum() +\n  theme(\n    legend.position=\"none\",\n    panel.spacing = unit(0, \"lines\"),\n    strip.text.x = element_text(size = 8),\n    plot.title = element_text(size=13)\n  ) +\n  facet_wrap(~name, scale=\"free_y\")\n\n\n\n\n\n\nSources:\nhttps://r-graph-gallery.com/81-barplot-with-variable-width.html\nhttps://www.statista.com/statistics/184272/educational-attainment-of-college-diploma-or-higher-by-gender/\nhttps://www.statista.com/statistics/236360/undergraduate-enrollment-in-us-by-gender/\nhttps://r-graph-gallery.com/223-faceting-with-ggplot2.html"
  },
  {
    "objectID": "assign06.html",
    "href": "assign06.html",
    "title": "Assignment 6",
    "section": "",
    "text": "Making a Shiny App using “ChickWeights” data in R. Here’s some documentation to understand this data set:\n\nTable 1: Data Desciptions\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nweight\na numeric vector giving the body weight of the chick (gm).\n\n\nTime\na numeric vector giving the number of days since birth when the measurement was made.\n\n\nChick\nan ordered factor with levels 18 < … < 48 giving a unique identifier for the chick. The ordering of the levels groups chicks on the same diet together and orders them according to their final weight (lightest to heaviest) within diet.\n\n\nDiet\na factor with levels 1, …, 4 indicating which experimental diet the chick received.\n\n\n\nCode for Shiny App\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# defining UI\nui <- shinyUI(fluidPage(\n  titlePanel(\"Chick Weights by Diet\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"sliderDay\", \"Select Day Range:\",\n                  min = 0, max = 22,\n                  value = c(0,22),step =1),\n      h4(\"Select Diet(s)\"),\n      checkboxInput(\"showDiet1\", \"Diet1\", value = TRUE),\n      checkboxInput(\"showDiet2\", \"Diet2\", value = TRUE),\n      checkboxInput(\"showDiet3\", \"Diet3\", value = TRUE),\n      checkboxInput(\"showDiet4\", \"Diet4\", value = TRUE),\n      h4(\"Options\"),\n      checkboxInput(\"jitter\", \"Add Jitter\", value = TRUE),\n      checkboxInput(\"loes\", \"Show Regression Lines\", value = TRUE)\n    ),\n    \n    mainPanel(\n      plotOutput(\"plot1\",\n                 click = \"plot_click\",\n                 hover = \"plot_hover\"),\n      \n      h4(\"Use click and/or hover on the plot to examine data points\"),\n      #Output click and hover parameters\n      verbatimTextOutput(\"info\")\n    ))\n  \n)\n)\n\n# Defining Server\nserver <- shinyServer(function(input, output) {\n  \n  output$plot1 <- renderPlot({\n    # start with empty dataframe \n    plotdata <- ChickWeight[0,]\n    #add to this dataframe as specific diets are selected\n    if(input$showDiet1){\n      plotdata1 <- filter(ChickWeight,Diet==1)\n      plotdata <- rbind(plotdata1,plotdata)\n    }\n    if(input$showDiet2){\n      plotdata2 <- filter(ChickWeight,Diet==2)\n      plotdata <- rbind(plotdata2,plotdata)\n    }\n    if(input$showDiet3){\n      plotdata3 <- filter(ChickWeight,Diet==3)\n      plotdata <- rbind(plotdata3, plotdata)\n    }\n    if(input$showDiet4){\n      plotdata4 <- filter(ChickWeight,Diet==4)\n      plotdata <- rbind(plotdata4,plotdata)\n    }\n    \n    #Transfer temporary dataframe to final\n    fnl_plotdata <- plotdata\n    \n    # Set up plotting option parameters\n    # Extract day range from sliderDay input\n    dayRange <- input$sliderDay\n    \n    # Determine min/max weight values scale y axis limits for plotting various ranges\n    minmax  <- filter(fnl_plotdata, Time >= dayRange[1] & Time <= dayRange[2])\n    \n    # Set up jitter width variable  - jitter adds noise to break up ties\n    offset <- ifelse(input$jitter,.25,0)\n    \n    # Plot data  \n    p <- ggplot(fnl_plotdata, aes(x=Time,y=weight,color = Diet)) + geom_jitter(width = offset)+\n      geom_point() +  \n      labs(title=\"Effect of Diet on Chick Weights\") +\n      labs(x=\"Time (Days)\", y = \"Weight (Grams)\",legend = \"Diet\") +\n      coord_cartesian(xlim = c(dayRange), ylim = c(min(minmax$weight),max(minmax$weight)))\n    \n    # Add regression lines if checkbox is selected\n    if(input$loes){\n      p <- p + geom_smooth(method = loess,se = FALSE)\n    }\n    p\n  })\n  \n  # Set up click and hover tools\n  output$info <- renderText({\n    xy_str <- function(e) {\n      if(is.null(e)) return(\"NULL\\n\")\n      paste0(\"Day =\", round(e$x, 0), \" Weight(Grams) =\", round(e$y, 0), \"\\n\")\n    }\n    xy_range_str <- function(e) {\n      if(is.null(e)) return(\"NULL\\n\")\n      paste0(\"xmin=\", round(e$xmin, 1), \" xmax=\", round(e$xmax, 1), \n             \" ymin=\", round(e$ymin, 1), \" ymax=\", round(e$ymax, 1))\n    }\n    \n    paste0(\n      \"click: \", xy_str(input$plot_click),\n      \"hover: \", xy_str(input$plot_hover)\n    )\n    \n  })\n})\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\nHere’s a link to the app this code generates."
  },
  {
    "objectID": "assign03.html",
    "href": "assign03.html",
    "title": "Assignment 3",
    "section": "",
    "text": "We could begin by simply plotting \"x1\" against \"y1\"\n\n\nShow the code\ndata(anscombe)\nplot(anscombe$x1,anscombe$y1)\n\n\nOutput:\n\n\n\nFigure 1: Scatterplot y1 by x1\n\n\nWe create four model objects by running the following regressions\n\n\nShow the code\ninstall.packages(\"modelsummary\")\ninstall.packages(\"kableExtra\")\ninstall.packages(\"gt\")\nlibrary(modelsummary)\nlibrary(kableExtra)\nlibrary(gt)\n\nlm1 <- lm(y1 ~ x1, data=anscombe)\nsummary(lm1)\nlm2 <- lm(y2 ~ x2, data=anscombe)\nsummary(lm2)\nlm3 <- lm(y3 ~ x3, data=anscombe)\nsummary(lm3)\nlm4 <- lm(y4 ~ x4, data=anscombe)\nsummary(lm4)\n\nmodels <- list(\n  \"lm1\" = lm1,\n  \"lm2\" = lm2,\n  \"lm3\" = lm3,\n  \"lm4\" = lm4)\n\nmodelsummary(models)\n\n\nThis results in the following table:\n\n\n\nTable 1: Comparing Regression Output\n\n\nWe can also visualize the fit of the model by comparing plots below. Using \"par(mfrow=c(2, 2))\" we can display the plots side by side.\n\n\nShow the code\npar(mfrow=c(2, 2))\n\nplot(anscombe$x1,anscombe$y1)\nabline(coefficients(lm1))\nplot(anscombe$x2,anscombe$y2)\nabline(coefficients(lm2))\nplot(anscombe$x3,anscombe$y3)\nabline(coefficients(lm3))\nplot(anscombe$x4,anscombe$y4)\nabline(coefficients(lm4))\n\n\nOutput:\n\n\n\nFigure 2: Comparing Plots\n\n\nGenerating a fancier version using for loops:\n\n\nShow the code\nff <- y ~ x\nmods <- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] <- as.name(paste0(\"y\", i))\n  ##      ff[[3]] <- as.name(paste0(\"x\", i))\n  mods[[i]] <- lmi <- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n\nsapply(mods, coef)  # Note the use of this function\nlapply(mods, function(fm) coef(summary(fm)))\n\n# Preparing for the plots\nop <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"red\", pch = 21, bg = \"orange\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"blue\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\npar(op)\n\n\nOutput:\n\n\n\nFigure 3: Anscombe's 4 Regression Datasets"
  },
  {
    "objectID": "assign02.html",
    "href": "assign02.html",
    "title": "Assignment 2",
    "section": "",
    "text": "The full code is given below.\n\n\nShow the code\n### Paul Murrell's R examples (selected)\n\n## Start plotting from basics \n# Note the order\nplot(pressure, pch=16)  # Can you change pch?\ntext(150, 600, \n     \"Pressure (mm Hg)\\nversus\\nTemperature (Celsius)\")\n\n#  Examples of standard high-level plots \n#  In each case, extra output is also added using low-level \n#  plotting functions.\n# \n\n# Setting the parameter (3 rows by 2 cols)\npar(mfrow=c(3, 2))\n\n# Scatterplot\n# Note the incremental additions\n\nx <- c(0.5, 2, 4, 8, 12, 16)\ny1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 <- c(4, .8, .5, .45, .4, .3)\n\n# Setting label orientation, margins c(bottom, left, top, right) & text size\npar(las=1, mar=c(4, 4, 2, 4), cex=.7) \nplot.new()\nplot.window(range(x), c(0, 6))\nlines(x, y1)\nlines(x, y2)\npoints(x, y1, pch=16, cex=2) # Try different cex value?  \npoints(x, y2, pch=21, bg=\"white\", cex=2)  # Different background color\npar(col=\"gray50\", fg=\"gray50\", col.axis=\"gray50\")\naxis(1, at=seq(0, 16, 4)) # What is the first number standing for?\naxis(2, at=seq(0, 6, 2))\naxis(4, at=seq(0, 6, 2))\nbox(bty=\"u\")\nmtext(\"Travel Time (s)\", side=1, line=2, cex=0.8)\nmtext(\"Responses per Travel\", side=2, line=2, las=0, cex=0.8)\nmtext(\"Responses per Second\", side=4, line=2, las=0, cex=0.8)\ntext(4, 5, \"Bird 131\")\npar(mar=c(5.1, 4.1, 4.1, 2.1), col=\"black\", fg=\"black\", col.axis=\"black\")\n\n# Histogram\n# Random data\nY <- rnorm(50)\n# Make sure no Y exceed [-3.5, 3.5]\nY[Y < -3.5 | Y > 3.5] <- NA # Selection/set range\nx <- seq(-3.5, 3.5, .1)\ndn <- dnorm(x)\npar(mar=c(4.5, 4.1, 3.1, 0))\nhist(Y, breaks=seq(-3.5, 3.5), ylim=c(0, 0.5), \n     col=\"gray80\", freq=FALSE)\nlines(x, dnorm(x), lwd=2)\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n# Barplot\npar(mar=c(2, 3.1, 2, 2.1)) \nmidpts <- barplot(VADeaths, \n                  col=gray(0.1 + seq(1, 9, 2)/11), \n                  names=rep(\"\", 4))\nmtext(sub(\" \", \"\\n\", colnames(VADeaths)),\n      at=midpts, side=1, line=0.5, cex=0.5)\ntext(rep(midpts, each=5), apply(VADeaths, 2, cumsum) - VADeaths/2,\n     VADeaths, \n     col=rep(c(\"white\", \"black\"), times=3:2), \n     cex=0.8)\npar(mar=c(5.1, 4.1, 4.1, 2.1))  \n\n# Boxplot\npar(mar=c(3, 4.1, 2, 0))\nboxplot(len ~ dose, data = ToothGrowth,\n        boxwex = 0.25, at = 1:3 - 0.2,\n        subset= supp == \"VC\", col=\"white\",\n        xlab=\"\",\n        ylab=\"tooth length\", ylim=c(0,35))\nmtext(\"Vitamin C dose (mg)\", side=1, line=2.5, cex=0.8)\nboxplot(len ~ dose, data = ToothGrowth, add = TRUE,\n        boxwex = 0.25, at = 1:3 + 0.2,\n        \n        subset= supp == \"OJ\")\nlegend(1.5, 9, c(\"Ascorbic acid\", \"Orange juice\"), \n       fill = c(\"white\", \"gray\"), \n       bty=\"n\")\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n# Persp\nx <- seq(-10, 10, length= 30)\ny <- x\nf <- function(x,y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }\nz <- outer(x, y, f)\nz[is.na(z)] <- 1\n# 0.5 to include z axis label\npar(mar=c(0, 0.5, 0, 0), lwd=0.5)\npersp(x, y, z, theta = 30, phi = 30, \n      expand = 0.5)\npar(mar=c(5.1, 4.1, 4.1, 2.1), lwd=1)\n\n# Piechart\npar(mar=c(0, 2, 1, 2), xpd=FALSE, cex=0.5)\npie.sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)\nnames(pie.sales) <- c(\"Blueberry\", \"Cherry\",\n                      \"Apple\", \"Boston Cream\", \"Other\", \"Vanilla\")\npie(pie.sales, col = gray(seq(0.3,1.0,length=6))) \n\n# Exercise: Can you generate these charts individually?  Try these functions \n# using another dataset. Be sure to work on the layout and margins\n\n\nRunning the code line by line to understand it better.\n\n\nShow the code\nplot(pressure, pch=12)  # Can you change pch?\ntext(150, 625, \n     \"Pressure (mm Hg)\\nversus\\nTemperature (Celsius)\")\n\n\nIt is possible to change the “pch” value. The value of “pch” modifies the point symbol. The following point shapes are available in R:\n\n\n\nFigure 1: Point shapes in R\n\n\nThe second line “text…” controls the position of the text. This is the graph that is generated when we execute the two lines of code above:\n\n\n\nFigure 2: Pressure vs. Temperature\n\n\nNext we can set the parameter for the plots we generate.\n\n\nShow the code\npar(mfrow=c(3, 2))\n\n\nThis will result in the plots being displaced in a 3 x 2 grid as shown below:\n\n\n\nFigure 3: Plots in 3 x 2 configuration\n\n\nWe can make more plots using the Happy Planet index data.\n\n\nShow the code\nboxplot(AverageLifeExpectancy ~ pop, data = hpi2016)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Arslan Khalid",
    "section": "",
    "text": "This website compiles assignments for EPPS 6356 - Data Visualization."
  },
  {
    "objectID": "assign01.html",
    "href": "assign01.html",
    "title": "Assignment 1",
    "section": "",
    "text": "Using “Fall.R” to Generate Art\nHere are a few examples of generative art that were created using “Fall.R”. I tried different colors:\n\n\nShow the code\n# Install packages\n\ninstall.packages(\"gsubfn\")\ninstall.packages(\"tidyverse\")\nlibrary(gsubfn)\nlibrary(tidyverse)\n\n# Define elements in plant art\n# Each image corresponds to a different axiom, rules, angle and depth\n\n# Leaf of Fall\n\naxiom=\"X\"\nrules=list(\"X\"=\"F-[[X]+X]+F[+FX]-X\", \"F\"=\"FF\")\nangle=22.5\ndepth=6\n\n\nfor (i in 1:depth) axiom=gsubfn(\".\", rules, axiom)\n\nactions=str_extract_all(axiom, \"\\\\d*\\\\+|\\\\d*\\\\-|F|L|R|\\\\[|\\\\]|\\\\|\") %>% unlist\n\nstatus=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))\npoints=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)\n\n# Generating data\n# Note: may take a minute or two\n\nfor (action in actions)\n{\n  if (action==\"F\")\n  {\n    x=points[1, \"x1\"]+cos(points[1, \"alfa\"]*(pi/180))\n    y=points[1, \"y1\"]+sin(points[1, \"alfa\"]*(pi/180))\n    points[1,\"x2\"]=x\n    points[1,\"y2\"]=y\n    data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,\n               alfa=points[1, \"alfa\"],\n               depth=points[1,\"depth\"]) %>% rbind(points)->points\n  }\n  if (action %in% c(\"+\", \"-\")){\n    alfa=points[1, \"alfa\"]\n    points[1, \"alfa\"]=eval(parse(text=paste0(\"alfa\",action, angle)))\n  }\n  if(action==\"[\"){\n    data.frame(x=points[1, \"x1\"], y=points[1, \"y1\"], alfa=points[1, \"alfa\"]) %>%\n      rbind(status) -> status\n    points[1, \"depth\"]=points[1, \"depth\"]+1\n  }\n  \n  if(action==\"]\"){\n    depth=points[1, \"depth\"]\n    points[-1,]->points\n    data.frame(x1=status[1, \"x\"], y1=status[1, \"y\"], x2=NA, y2=NA,\n               alfa=status[1, \"alfa\"],\n               depth=depth-1) %>%\n      rbind(points) -> points\n    status[-1,]->status\n  }\n}\n\nggplot() +\n  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),\n               lineend = \"round\",\n               color=\"aliceblue\", # Set your own Fall color?\n               data=na.omit(points)) +\n  coord_fixed(ratio = 1) +\n  theme_void() # No grid nor axes\n\n\n\n\n\nColor: “coral2”\n\n\n\n\n\nColor: “goldenrod1”\n\n\n\n\n\nColor: “darkseagreen4”\n\n\n\n\nAnalysis of Graph\nThe following graph was taken from the article “Risk of COVID-19 Exposure Still a Concern for U.S. Employees”. The graph is too cluttered and tries to show a lot of information at once. It would be useful to break up the single graphic into multiple. Additionally, some other categories may also be useful to explore; for example: instead of having categories like “men” and “democrats” - it might be useful to look at Democrats who are men versus democrats who are women. The color scheme for the graph could also be more indicative of the information it represents. The employees who are least concerned about COVID-19 are colored in the brightest green. Having a vertical bar graph might also help the viewer distinguish the differences between values better.\n\n\n\nConcern About COVID-19 Exposure at Work, by Employee Demographics"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Education\nBSc (Hons) Social Sciences, 2011\n\nLahore University of Management Sciences\n_____________________________________\nPhD Public Policy and Political Economy, 2025\n\n\nUniversity of Texas at Dallas\n_____________________________________\n\n\n\nCertifications\nQualitative Research Summer Intensive, 2022\n\nFundamentals of Qualitative Research\nConducting Qualitative Interviews\nCoding and Analyzing Qualitative Data\n\n_____________________________________\nMasters Course: Evidence Based Decision Making and the Role of Big Data in Public Policy, 2019\n\nInformation Technology University\n_____________________________________\nCertificate in Web and Graphic Design, 2007\n\n\nPunjab University, Lahore\n_____________________________________"
  }
]